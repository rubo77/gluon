From: Ludwig Thomeczek <ledesrc@wxorx.net>
Date: Sat, 22 Apr 2017 18:21:47 +0200
Subject: ar71xx: add support for TP-Link Archer C25 v1

The TP-Link Archer C25 is a low-cost Dualband Router:

 CPU:	Atheros QCA9561 775 Mhz
 RAM:	64 MB
 Flash:	8MB
 Wifi: 	3x3 2.4Ghz integrated
	1x1 5 Ghz QCA9887
 NET:	5x 10/100 Mbps Ethernet

Some LEDS are controlled by an additional 74HC595 chip.

Signed-off-by: Ludwig Thomeczek <ledesrc@wxorx.net>

diff --git a/target/linux/ar71xx/base-files/etc/board.d/01_leds b/target/linux/ar71xx/base-files/etc/board.d/01_leds
index f622929f7c792be690ab0adeb50d41f1b3c02ac2..393f8d583088dfe37f9098432fc0eff9b4df21bf 100755
--- a/target/linux/ar71xx/base-files/etc/board.d/01_leds
+++ b/target/linux/ar71xx/base-files/etc/board.d/01_leds
@@ -49,6 +49,15 @@ antrouter-r1)
 	ucidef_set_led_wlan "wlan" "WLAN" "$board:green:wlan" "phy0tpt"
 	ucidef_set_led_default "btc" "BTC" "$board:green:btc" "0"
 	;;
+archer-c25-v1)
+	ucidef_set_led_netdev "wan" "WAN" "$board:green:wan" "eth0"
+	ucidef_set_led_wlan "wlan" "WLAN" "$board:green:wlan2g" "phy1tpt"
+	ucidef_set_led_wlan "wlan5g" "WLAN5G" "$board:green:wlan5g" "phy0tpt"
+	ucidef_set_led_switch "lan1" "LAN1" "$board:green:lan1" "switch0" "0x10"
+	ucidef_set_led_switch "lan2" "LAN2" "$board:green:lan2" "switch0" "0x08"
+	ucidef_set_led_switch "lan3" "LAN3" "$board:green:lan3" "switch0" "0x04"
+	ucidef_set_led_switch "lan4" "LAN4" "$board:green:lan4" "switch0" "0x02"
+	;;
 arduino-yun)
 	ucidef_set_led_wlan "wlan" "WLAN" "arduino:blue:wlan" "phy0tpt"
 	ucidef_set_led_usbdev "usb" "USB" "arduino:white:usb" "1-1.1"
diff --git a/target/linux/ar71xx/base-files/etc/board.d/02_network b/target/linux/ar71xx/base-files/etc/board.d/02_network
index 10f84bf71716d4a174536e6b3ab7841e3041d512..a673dbfc0b22d6eaa0976008fb332a38afc39a13 100755
--- a/target/linux/ar71xx/base-files/etc/board.d/02_network
+++ b/target/linux/ar71xx/base-files/etc/board.d/02_network
@@ -122,6 +122,7 @@ ar71xx_setup_interfaces()
 	a60|\
 	alfa-ap96|\
 	alfa-nx|\
+	archer-c25-v1|\
 	gl-ar150|\
 	gl-ar300m|\
 	gl-domino|\
diff --git a/target/linux/ar71xx/base-files/etc/diag.sh b/target/linux/ar71xx/base-files/etc/diag.sh
index 7b8aac8f8e97d86178e917d70923d8a2a3849d5d..cf6278cea3ca45da0093e588e4b3995c7918d6f0 100644
--- a/target/linux/ar71xx/base-files/etc/diag.sh
+++ b/target/linux/ar71xx/base-files/etc/diag.sh
@@ -47,6 +47,7 @@ get_status_led() {
 	ap135-020)
 		status_led="ap135:green:status"
 		;;
+	archer-c25-v1|\
 	mr12|\
 	mr16|\
 	nbg6616|\
diff --git a/target/linux/ar71xx/base-files/etc/hotplug.d/firmware/11-ath10k-caldata b/target/linux/ar71xx/base-files/etc/hotplug.d/firmware/11-ath10k-caldata
index b3e23c9a8f8c56870ef36fb55ae52e6b5ea61134..b0921b312ab1002233ac8746b2e0c74b150f5b24 100644
--- a/target/linux/ar71xx/base-files/etc/hotplug.d/firmware/11-ath10k-caldata
+++ b/target/linux/ar71xx/base-files/etc/hotplug.d/firmware/11-ath10k-caldata
@@ -72,6 +72,7 @@ case "$FIRMWARE" in
 		ath10kcal_extract "caldata" 20480 2116
 		ath10kcal_patch_mac $(macaddr_add $(cat /sys/class/net/eth0/address) +1)
 		;;
+	archer-c25-v1|\
 	mc-mac1200r)
 		ath10kcal_extract "art" 20480 2116
 		ath10kcal_patch_mac $(macaddr_add $(cat /sys/class/net/eth1/address) -1)
diff --git a/target/linux/ar71xx/base-files/lib/ar71xx.sh b/target/linux/ar71xx/base-files/lib/ar71xx.sh
index b035535a42f997adfcd046ef518ef46585821633..75637cbe22274ebb11370ffa8268296ec613a3dd 100755
--- a/target/linux/ar71xx/base-files/lib/ar71xx.sh
+++ b/target/linux/ar71xx/base-files/lib/ar71xx.sh
@@ -460,6 +460,9 @@ ar71xx_board_detect() {
 	*"Archer C5")
 		name="archer-c5"
 		;;
+	*"Archer C25 v1")
+		name="archer-c25-v1"
+		;;
 	*"Archer C7")
 		name="archer-c7"
 		;;
diff --git a/target/linux/ar71xx/config-4.4 b/target/linux/ar71xx/config-4.4
index ff6bb135d1cbe3ef80ff77d8732514f5bf1bcfb2..d9c7885d4fb364aa9059735b1778e09a3a7e46f0 100644
--- a/target/linux/ar71xx/config-4.4
+++ b/target/linux/ar71xx/config-4.4
@@ -50,6 +50,7 @@ CONFIG_ATH79_MACH_AP152=y
 # CONFIG_ATH79_MACH_AP81 is not set
 CONFIG_ATH79_MACH_AP90Q=y
 CONFIG_ATH79_MACH_AP96=y
+CONFIG_ATH79_MACH_ARCHER_C25_V1=y
 CONFIG_ATH79_MACH_ARCHER_C7=y
 CONFIG_ATH79_MACH_ARDUINO_YUN=y
 CONFIG_ATH79_MACH_AW_NR580=y
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt b/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
index 76ba6fafb704152c2c6a119cdcb73f41a839c164..3f48c443ff8955a1071519377ee60b8ca5fcd6b5 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
+++ b/target/linux/ar71xx/files/arch/mips/ath79/Kconfig.openwrt
@@ -1224,6 +1224,16 @@ config ATH79_MACH_BSB
 	select ATH79_DEV_USB
 	select ATH79_DEV_WMAC
 
+config ATH79_MACH_ARCHER_C25_V1
+	bool "TP-LINK Archer C25 v1 support"
+	select SOC_QCA956X
+	select ATH79_DEV_AP9X_PCI if PCI
+	select ATH79_DEV_ETH
+	select ATH79_DEV_GPIO_BUTTONS
+	select ATH79_DEV_LEDS_GPIO
+	select ATH79_DEV_M25P80
+	select ATH79_DEV_WMAC
+
 config ATH79_MACH_ARCHER_C7
 	bool "TP-LINK Archer C5/C7/TL-WDR4900 v2 board support"
 	select SOC_QCA955X
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/Makefile b/target/linux/ar71xx/files/arch/mips/ath79/Makefile
index c91d03ff21584de992827233fc795a474cc106ec..fc2871637c2dca25166f0b1cdee341ab8be9fcef 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/Makefile
+++ b/target/linux/ar71xx/files/arch/mips/ath79/Makefile
@@ -55,6 +55,7 @@ obj-$(CONFIG_ATH79_MACH_AP147)			+= mach-ap147.o
 obj-$(CONFIG_ATH79_MACH_AP152)			+= mach-ap152.o
 obj-$(CONFIG_ATH79_MACH_AP90Q)			+= mach-ap90q.o
 obj-$(CONFIG_ATH79_MACH_AP96)			+= mach-ap96.o
+obj-$(CONFIG_ATH79_MACH_ARCHER_C25_V1)		+= mach-archer-c25-v1.o
 obj-$(CONFIG_ATH79_MACH_ARCHER_C7)		+= mach-archer-c7.o
 obj-$(CONFIG_ATH79_MACH_ARDUINO_YUN)		+= mach-arduino-yun.o
 obj-$(CONFIG_ATH79_MACH_AW_NR580)		+= mach-aw-nr580.o
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/mach-archer-c25-v1.c b/target/linux/ar71xx/files/arch/mips/ath79/mach-archer-c25-v1.c
new file mode 100644
index 0000000000000000000000000000000000000000..cc48292b1cdbcb346ab1962bf29c633581d8d93b
--- /dev/null
+++ b/target/linux/ar71xx/files/arch/mips/ath79/mach-archer-c25-v1.c
@@ -0,0 +1,234 @@
+/*
+ *  TP-Link Archer C25 v1 board support
+ *
+ *  Copyright (C) 2017 Ludwig Thomeczek <ledesrc@wxorx.net>
+ * 	based on mach-archer-c60/C59-v1.c
+ *  Copyright (C) 2016 Henryk Heisig <hyniu@o2.pl>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ */
+#include <linux/platform_device.h>
+#include <linux/ath9k_platform.h>
+#include <linux/ar8216_platform.h>
+#include <asm/mach-ath79/ar71xx_regs.h>
+#include <linux/gpio.h>
+
+#include "common.h"
+#include "dev-m25p80.h"
+#include "machtypes.h"
+#include "pci.h"
+#include "dev-ap9x-pci.h"
+#include "dev-eth.h"
+#include "dev-gpio-buttons.h"
+#include "dev-leds-gpio.h"
+#include "dev-spi.h"
+#include "dev-usb.h"
+#include "dev-wmac.h"
+#include <linux/spi/spi_gpio.h>
+#include <linux/spi/74x164.h>
+
+#define ARCHER_C25_GPIO_SHIFT_OE		21/* OE,    Output Enable */
+#define ARCHER_C25_GPIO_SHIFT_SER		14/* DS,    Data Serial input */
+#define ARCHER_C25_GPIO_SHIFT_SRCLK		15/* SHCP,  Shift Register Clock Input */
+#define ARCHER_C25_GPIO_SHIFT_SRCLR		19/* MR,    Master Reset */
+#define ARCHER_C25_GPIO_SHIFT_RCLK		16/* STCP,  Storage Register Clock Input */
+
+#define ARCHER_C25_74HC_GPIO_BASE		QCA956X_GPIO_COUNT
+#define ARCHER_C25_74HC_GPIO_LED_WAN_GREEN		27
+#define ARCHER_C25_74HC_GPIO_LED_WAN_AMBER		28
+#define ARCHER_C25_74HC_GPIO_LED_WLAN2	29
+#define ARCHER_C25_74HC_GPIO_LED_WLAN5	30
+#define ARCHER_C25_74HC_GPIO_LED_LAN1		23
+#define ARCHER_C25_74HC_GPIO_LED_LAN2		24
+#define ARCHER_C25_74HC_GPIO_LED_LAN3		25
+#define ARCHER_C25_74HC_GPIO_LED_LAN4		26
+
+#define ARCHER_C25_V1_SSR_BIT_0			0
+#define ARCHER_C25_V1_SSR_BIT_1			1
+#define ARCHER_C25_V1_SSR_BIT_2			2
+#define ARCHER_C25_V1_SSR_BIT_3			3
+#define ARCHER_C25_V1_SSR_BIT_4			4
+#define ARCHER_C25_V1_SSR_BIT_5			5
+#define ARCHER_C25_V1_SSR_BIT_6			6
+#define ARCHER_C25_V1_SSR_BIT_7			7
+
+
+#define ARCHER_C25_V1_KEYS_POLL_INTERVAL	20
+#define ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL	(3 * ARCHER_C25_V1_KEYS_POLL_INTERVAL)
+
+#define ARCHER_C25_V1_GPIO_BTN_RESET		1
+#define ARCHER_C25_V1_GPIO_BTN_RFKILL		22
+
+#define ARCHER_C25_V1_GPIO_LED_POWER		17
+#define ARCHER_C25_V1_GPIO_LED_WPS		2
+
+#define ARCHER_C25_V1_WMAC_CALDATA_OFFSET	0x1000
+
+static struct spi_gpio_platform_data archer_c25_v1_spi_data = {
+	.sck		= ARCHER_C25_GPIO_SHIFT_SRCLK,
+	.miso		= SPI_GPIO_NO_MISO,
+	.mosi		= ARCHER_C25_GPIO_SHIFT_SER,
+	.num_chipselect = 1,
+};
+
+static u8 archer_c25_v1_ssr_initdata[] __initdata = {
+	BIT(ARCHER_C25_V1_SSR_BIT_7) |
+	BIT(ARCHER_C25_V1_SSR_BIT_6) |
+	BIT(ARCHER_C25_V1_SSR_BIT_5) |
+	BIT(ARCHER_C25_V1_SSR_BIT_4) |
+	BIT(ARCHER_C25_V1_SSR_BIT_3) |
+	BIT(ARCHER_C25_V1_SSR_BIT_2) |
+	BIT(ARCHER_C25_V1_SSR_BIT_1)
+};
+
+static struct gen_74x164_chip_platform_data archer_c25_v1_ssr_data = {
+	.base = ARCHER_C25_74HC_GPIO_BASE,
+	.num_registers = ARRAY_SIZE(archer_c25_v1_ssr_initdata),
+	.init_data = archer_c25_v1_ssr_initdata,
+};
+
+static struct platform_device archer_c25_v1_spi_device = {
+	.name		= "spi_gpio",
+	.id		= 1,
+	.dev = {
+		.platform_data = &archer_c25_v1_spi_data,
+	},
+};
+
+static struct spi_board_info archer_c25_v1_spi_info[] = {
+	{
+		.bus_num	= 1,
+		.chip_select	= 0,
+		.max_speed_hz	= 10000000,
+		.modalias	= "74x164",
+		.platform_data	=  &archer_c25_v1_ssr_data,
+		.controller_data = (void *) ARCHER_C25_GPIO_SHIFT_RCLK,
+	},
+};
+
+static struct gpio_led archer_c25_v1_leds_gpio[] __initdata = {
+	{
+		.name		= "archer-c25-v1:green:power",
+		.gpio		= ARCHER_C25_V1_GPIO_LED_POWER,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:wps",
+		.gpio		= ARCHER_C25_V1_GPIO_LED_WPS,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:wlan2g",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_WLAN2,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:wlan5g",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_WLAN5,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:lan1",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_LAN1,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:lan2",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_LAN2,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:lan3",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_LAN3,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:lan4",
+		.gpio		= ARCHER_C25_74HC_GPIO_LED_LAN4,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:green:wan",
+		.gpio		=  ARCHER_C25_74HC_GPIO_LED_WAN_GREEN,
+		.active_low	= 1,
+	},
+	{
+		.name		= "archer-c25-v1:amber:wan",
+		.gpio		=  ARCHER_C25_74HC_GPIO_LED_WAN_AMBER,
+		.active_low	= 1,
+	},
+};
+
+static struct gpio_keys_button archer_c25_v1_gpio_keys[] __initdata = {
+	{
+		.desc			= "Reset button",
+		.type			= EV_KEY,
+		.code			= KEY_RESTART,
+		.debounce_interval	= ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL,
+		.gpio			= ARCHER_C25_V1_GPIO_BTN_RESET,
+		.active_low		= 1,
+	},
+	{
+		.desc			= "RFKILL button",
+		.type			= EV_KEY,
+		.code			= KEY_RFKILL,
+		.debounce_interval	= ARCHER_C25_V1_KEYS_DEBOUNCE_INTERVAL,
+		.gpio			= ARCHER_C25_V1_GPIO_BTN_RFKILL,
+		.active_low		= 1,
+	},
+};
+
+static void __init archer_c25_v1_setup(void)
+{
+	u8 *mac = (u8 *) KSEG1ADDR(0x1f7e0008);
+	u8 *art = (u8 *) KSEG1ADDR(0x1f7f0000);
+
+	ath79_register_m25p80(NULL);
+
+	spi_register_board_info(archer_c25_v1_spi_info,
+			   ARRAY_SIZE(archer_c25_v1_spi_info));
+	platform_device_register(&archer_c25_v1_spi_device);
+	
+	gpio_request_one(ARCHER_C25_GPIO_SHIFT_OE,
+			 GPIOF_OUT_INIT_LOW | GPIOF_EXPORT_DIR_FIXED,
+			 "LED control");
+	gpio_request_one(ARCHER_C25_GPIO_SHIFT_SRCLR,
+			 GPIOF_OUT_INIT_HIGH | GPIOF_EXPORT_DIR_FIXED,
+			 "LED reset");
+
+	ath79_register_leds_gpio(-1, ARRAY_SIZE(archer_c25_v1_leds_gpio),
+				archer_c25_v1_leds_gpio);
+
+	ath79_register_gpio_keys_polled(-1, ARCHER_C25_V1_KEYS_POLL_INTERVAL,
+					ARRAY_SIZE(archer_c25_v1_gpio_keys),
+					archer_c25_v1_gpio_keys);
+
+	ath79_register_mdio(0, 0x0);
+	ath79_register_mdio(1, 0x0);
+
+	ath79_init_mac(ath79_eth0_data.mac_addr, mac, 0);
+	ath79_init_mac(ath79_eth1_data.mac_addr, mac, 1);
+
+	/* WAN port */
+	ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_MII;
+	ath79_eth0_data.speed = SPEED_100;
+	ath79_eth0_data.duplex = DUPLEX_FULL;
+	ath79_eth0_data.phy_mask = BIT(4);
+	ath79_register_eth(0);
+
+	/* LAN ports */
+	ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII;
+	ath79_eth1_data.speed = SPEED_1000;
+	ath79_eth1_data.duplex = DUPLEX_FULL;
+	ath79_switch_data.phy_poll_mask |= BIT(4);
+	ath79_switch_data.phy4_mii_en = 1;
+	ath79_register_eth(1);
+
+	ath79_register_wmac(art + ARCHER_C25_V1_WMAC_CALDATA_OFFSET, mac);
+	ap91_pci_init(NULL, NULL);
+}
+
+MIPS_MACHINE(ATH79_MACH_ARCHER_C25_V1, "ARCHER-C25-V1",
+	"TP-LINK Archer C25 v1", archer_c25_v1_setup);
diff --git a/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h b/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
index b9a8e3e4e0c91f57ba864cfeb69002e883268099..53f0d1cb1f2cd75e4a17e32a4a82f8de57878bac 100644
--- a/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
+++ b/target/linux/ar71xx/files/arch/mips/ath79/machtypes.h
@@ -39,6 +39,7 @@ enum ath79_mach_type {
 	ATH79_MACH_AP152,			/* Atheros AP152 reference board */
 	ATH79_MACH_AP90Q,			/* YunCore AP90Q */
 	ATH79_MACH_AP96,			/* Atheros AP96 */
+	ATH79_MACH_ARCHER_C25_V1,		/* TP-LINK Archer C25 V1 board */
 	ATH79_MACH_ARCHER_C5,			/* TP-LINK Archer C5 board */
 	ATH79_MACH_ARCHER_C7,			/* TP-LINK Archer C7 board */
 	ATH79_MACH_ARCHER_C7_V2,		/* TP-LINK Archer C7 V2 board */
diff --git a/target/linux/ar71xx/image/tp-link.mk b/target/linux/ar71xx/image/tp-link.mk
index 1c88f434a6254af35ac54a3c8299bb70b5db4081..577a7235b6eb5a38707d28cb9e67c9de412892fc 100644
--- a/target/linux/ar71xx/image/tp-link.mk
+++ b/target/linux/ar71xx/image/tp-link.mk
@@ -95,6 +95,22 @@ $(Device/tplink)
   IMAGE_SIZE := 15872k
 endef
 
+define Device/archer-c25-v1
+  DEVICE_TITLE := TP-LINK Archer C25 v1
+  DEVICE_PACKAGES := kmod-ath10k ath10k-firmware-qca9887
+  BOARDNAME := ARCHER-C25-V1
+  TPLINK_BOARD_NAME := ARCHER-C25-V1
+  DEVICE_PROFILE := ARCHERC25V1
+  IMAGE_SIZE := 7936k
+  LOADER_TYPE := elf
+  KERNEL := kernel-bin | patch-cmdline | lzma | uImageArcher lzma
+  IMAGES := sysupgrade.bin factory.bin
+  IMAGE/sysupgrade.bin := append-rootfs | tplink-safeloader sysupgrade
+  IMAGE/factory.bin := append-rootfs | tplink-safeloader factory
+  MTDPARTS := spi0.0:128k(factory-uboot)ro,64k(u-boot)ro,1536k(kernel),6272k(rootfs),128k(config),64k(art)ro
+endef
+TARGET_DEVICES += archer-c25-v1
+
 define Device/cpe510-520
   DEVICE_TITLE := TP-LINK CPE510/520
   DEVICE_PACKAGES := rssileds
diff --git a/target/linux/ar71xx/mikrotik/config-default b/target/linux/ar71xx/mikrotik/config-default
index 44ea327fb1af2cef210e24d529826d315929a72c..3f11c235279f65b559ea5a1cb20d34265b9e4def 100644
--- a/target/linux/ar71xx/mikrotik/config-default
+++ b/target/linux/ar71xx/mikrotik/config-default
@@ -15,6 +15,7 @@
 # CONFIG_ATH79_MACH_AP152 is not set
 # CONFIG_ATH79_MACH_AP90Q is not set
 # CONFIG_ATH79_MACH_AP96 is not set
+# CONFIG_ATH79_MACH_ARCHER_C25_V1 is not set
 # CONFIG_ATH79_MACH_ARCHER_C7 is not set
 # CONFIG_ATH79_MACH_ARDUINO_YUN is not set
 # CONFIG_ATH79_MACH_AW_NR580 is not set
diff --git a/target/linux/ar71xx/nand/config-default b/target/linux/ar71xx/nand/config-default
index 515266b0f8386fa44a3c872ff7356d5a7bfb8dd2..63575314cc8dc449dbf32b04e1c337a13fb04af0 100644
--- a/target/linux/ar71xx/nand/config-default
+++ b/target/linux/ar71xx/nand/config-default
@@ -8,6 +8,7 @@
 # CONFIG_ATH79_MACH_AP136 is not set
 # CONFIG_ATH79_MACH_AP147 is not set
 # CONFIG_ATH79_MACH_AP96 is not set
+# CONFIG_ATH79_MACH_ARCHER_C25_V1 is not set
 # CONFIG_ATH79_MACH_ARCHER_C7 is not set
 # CONFIG_ATH79_MACH_AW_NR580 is not set
 # CONFIG_ATH79_MACH_CAP324 is not set
diff --git a/tools/firmware-utils/src/tplink-safeloader.c b/tools/firmware-utils/src/tplink-safeloader.c
index 89a6787b22974bde2b7d17533988124268b2b8b8..1491dd8380a154c173561a5301d4526e872ee55b 100644
--- a/tools/firmware-utils/src/tplink-safeloader.c
+++ b/tools/firmware-utils/src/tplink-safeloader.c
@@ -292,6 +292,48 @@ static struct device_info boards[] = {
 		.first_sysupgrade_partition = "os-image",
 		.last_sysupgrade_partition = "file-system"
 	},
+	
+	/** Firmware layout for the C25v1 */
+	{
+		.id	= "ARCHER-C25-V1",
+		.vendor	= "fw-type:Cloud\n",
+		.support_list =
+			"SupportList:\n"
+			"{product_name:ArcherC25,product_ver:1.0.0,special_id:00000000}\n"
+			"{product_name:ArcherC25,product_ver:1.0.0,special_id:55530000}\n"
+			"{product_name:ArcherC25,product_ver:1.0.0,special_id:45550000}\n",
+		.support_trail = '\x00',
+
+		/**
+		    We use a bigger os-image partition than the stock images (and thus
+		    smaller file-system), as our kernel doesn't fit in the stock firmware's
+		    1MB os-image.
+		*/
+		.partitions = {
+			{"factory-boot", 0x00000, 0x20000},
+			{"fs-uboot", 0x20000, 0x10000},
+			{"os-image", 0x30000, 0x180000}, /*Stock: base 0x30000 size 0x100000*/
+			{"file-system", 0x1b0000, 0x620000}, /*Stock: base 0x130000 size 0x6a0000  */
+			{"user-config", 0x7d0000, 0x04000},
+			{"default-mac", 0x7e0000, 0x00100},
+			{"device-id", 0x7e0100, 0x00100},
+			{"extra-para", 0x7e0200, 0x00100},
+			{"pin", 0x7e0300, 0x00100},
+			{"support-list", 0x7e0400, 0x00400},
+			{"soft-version", 0x7e0800, 0x00400},
+			{"product-info", 0x7e0c00, 0x01400},
+			{"partition-table", 0x7e2000, 0x01000},
+			{"profile", 0x7e3000, 0x01000},
+			{"default-config", 0x7e4000, 0x04000},
+			{"merge-config", 0x7ec000, 0x02000},
+			{"qos-db", 0x7ee000, 0x02000},
+			{"radio", 0x7f0000, 0x10000},
+			{NULL, 0, 0}
+		},
+
+		.first_sysupgrade_partition = "os-image",
+		.last_sysupgrade_partition = "file-system",
+	},
 
 	/** Firmware layout for the C9 */
 	{
@@ -581,6 +623,15 @@ static struct image_partition_entry read_file(const char *part_name, const char
 	return entry;
 }
 
+/** Creates a new image partition from arbitrary data */
+static struct image_partition_entry put_data(const char *part_name, const char * datain, size_t len) {
+
+	struct image_partition_entry entry = alloc_image_partition(part_name, len);
+
+	memcpy(entry.data, datain, len);
+
+	return entry;
+}
 
 /**
    Copies a list of image partitions into an image buffer and generates the image partition table while doing so
@@ -762,7 +813,8 @@ static void build_image(const char *output,
 		bool add_jffs2_eof,
 		bool sysupgrade,
 		const struct device_info *info) {
-	struct image_partition_entry parts[6] = {};
+
+	struct image_partition_entry parts[7] = {};
 
 	parts[0] = make_partition_table(info->partitions);
 	parts[1] = make_soft_version(rev);
@@ -770,6 +822,12 @@ static void build_image(const char *output,
 	parts[3] = read_file("os-image", kernel_image, false);
 	parts[4] = read_file("file-system", rootfs_image, add_jffs2_eof);
 
+	if(strcasecmp(info->id, "ARCHER-C25-V1") == 0 )
+	{
+		const char mdat[11] = {0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x01,0x00,0x00};
+		parts[5] = put_data("extra-para", mdat, 11 );
+	}
+
 	size_t len;
 	void *image;
 	if (sysupgrade)
